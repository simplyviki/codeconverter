import os
import streamlit as st
from dotenv import load_dotenv
from langchain import HuggingFaceHub
from langchain.chat_models import ChatOpenAI


def main():
    load_dotenv()
    hf_api_key = os.getenv('OPENAI_API_KEY')
    # print(hf_api_key)
    st.title("Code Conversion App")

    source_language = st.selectbox("Source Language", ["SAS", "Python", "Java"])
    destination_language = st.selectbox("Destination Language", ["Python", "SAS"])

    code = st.text_area("Enter the code to be converted:", max_chars=800)
    print(f'input code is: {code}')
    if st.button("Convert Code"):
        # llm = HuggingFaceHub(repo_id="google/flan-t5-xxl", model_kwargs={"temperature": 0.5, "max_length": 512})
        # llm = ChatOpenAI(api_key=hf_api_key, model_name='gpt-3.5-turbo')
        llm = ChatOpenAI(api_key=hf_api_key, model_name='text-davinci-003')
        # print(f'api_key is: {hf_api_key}')
        print(f'llm is: {llm}')
        # converted_code = convert_sas_to_target_language(code, destination_language, llm)
        prompt = f"Can you convert below {source_language} Program to {destination_language}, make sure the output only contain the converted code but not the recommendation, explaination or text"
        print(f'prompt is: {prompt}')
        # converted_code = convert_java_to_python(code, llm, prompt)
        converted_code = convert_sas_to_python(code, llm, prompt)
        if converted_code:
            st.write("Converted Code:")
            st.write(converted_code)
        else:
            st.write("No conversion was possible.")


def convert_sas_to_target_language(code, target_language, llm):
    try:
        # Process the code to obtain lines
        processed_lines = code.strip().split("\n")

        # Remove leading whitespace from each line
        processed_lines = [line.strip() for line in processed_lines]

        # Remove empty lines
        processed_lines = [line for line in processed_lines if line]

        # Generate the processed code
        processed_code = "\n".join(processed_lines)

        # Print the processed code for debugging
        print("Processed Code:")
        print(processed_code)

        # Convert processed code to a list of messages
        messages = [processed_code]

        # Ensure messages are strings
        messages = [str(message) for message in messages]

        # Print the messages for debugging
        print("Messages:")
        for message in messages:
            print(message)

        # Replace proc print with comment
        for i, message in enumerate(messages):
            while "proc print" in message:
                messages[i] = "# proc print"

        # Generate the conversion using OpenAI API
        print("Generating conversion...")
        converted_code = llm.generate(messages, target_language=target_language)

        # Print the converted code for debugging
        print("Converted Code:")
        print(converted_code)

        # Return the converted code
        return converted_code

    except ValueError as e:
        # Handle the error appropriately
        print("Error:", str(e))
        return None


def convert_java_to_python(code, llm, prompt):
    try:
        # Process the code to obtain lines
        processed_lines = code.strip().split("\n")
        # Remove leading whitespace from each line
        processed_lines = [line.strip() for line in processed_lines]
        # Remove empty lines
        processed_lines = [line for line in processed_lines if line]
        # Generate the processed code
        processed_code = "\n".join(processed_lines)

        # Print the processed code for debugging
        print("Processed Code:")
        print(processed_code)

        # Convert processed code to a list of messages
        messages = [processed_code]
        # Ensure messages are strings
        messages = [str(message) for message in messages]

        # Print the messages for debugging
        print("Messages:")
        for message in messages:
            print(f'message is: {message}')

        # Generate the conversion using OpenAI API

        print("Generating conversion...")
        converted_code = llm.generate(messages, target_language="python", prompt=prompt)

        # Print the converted code for debugging
        print("Converted Code:")
        print(converted_code)

        # Return the converted code
        return converted_code

    except ValueError as e:
        # Handle the error appropriately
        print("Error:", str(e))
        return None


def convert_sas_to_python(code, llm, prompt):
    try:
        # Replace DATA and PROC statements with placeholders
        code = code.replace("DATA", "def data_step():\n    ").replace("PROC", "def proc_step():\n    ")

        # Replace SAS-specific statements with Python equivalents
        code = code.replace("RUN;", "").replace(";", "\n").replace("PRINT", "print")

        # Print the converted code for debugging
        print("Code to be converted:")
        print(code)

        # Convert processed code to a list of messages
        messages = [code]
        # Ensure messages are strings
        messages = [str(message) for message in messages]

        # Print the messages for debugging
        print("Messages:")
        for message in messages:
            print(f'message is: {message}')

        # Generate the conversion using OpenAI API
        print("Generating conversion...")
        converted_code = llm.translate(messages, target_language="python", prompt=prompt)

        # Print the converted code for debugging
        print("Converted Code:")
        print(converted_code)

        # Return the converted code
        return converted_code

    except Exception as e:
        # Handle the error appropriately
        print("Error:", str(e))
        return None

# def convert_java_to_python(code, llm):
    # try:
    #     # Process the code to obtain lines
    #     processed_lines = code.strip().split("\n")
    #     print(f'processed_lines: {processed_lines}')
    #     # Remove leading whitespace from each line
    #     processed_lines = [line.strip() for line in processed_lines]
    #     print(f'processed_lines after stripping: {processed_lines}')
    #     # Remove empty lines
    #     processed_lines = [line for line in processed_lines if line]
    #     print(f'processed_lines after removing empty lines: {processed_lines}')
    #     # Generate the processed code
    #     processed_code = "\n".join(processed_lines)
    #
    #     # Print the processed code for debugging
    #     print("Processed Code:")
    #     print(processed_code)
    #
    #     # Convert processed code to a list of messages
    #     messages = [processed_code]
    #     print(f'messages is: {messages}')
    #     # Ensure messages are strings
    #     messages = [str(message) for message in messages]
    #
    #     # Print the messages for debugging
    #     print("Messages:")
    #     for message in messages:
    #         print(f'message is: {message}')
    #
    #     # Generate the conversion using OpenAI API
    #     print("Generating conversion...")
    #     converted_code = llm.generate(messages, target_language="python")
    #
    #     # Print the converted code for debugging
    #     print("Converted Code:")
    #     print(converted_code)
    #
    #     # Return the converted code
    #     return converted_code
    #
    # except ValueError as e:
    #     # Handle the error appropriately
    #     print("Error:", str(e))
    #     return None


if __name__ == "__main__":
    main()
